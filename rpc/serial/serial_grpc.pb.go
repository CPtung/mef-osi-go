// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: serial.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SerialClient is the client API for Serial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerialClient interface {
	GetSerial(ctx context.Context, in *SerialEmptyRequest, opts ...grpc.CallOption) (*SerialReply, error)
	// Update config
	SetSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*SerialReply, error)
}

type serialClient struct {
	cc grpc.ClientConnInterface
}

func NewSerialClient(cc grpc.ClientConnInterface) SerialClient {
	return &serialClient{cc}
}

func (c *serialClient) GetSerial(ctx context.Context, in *SerialEmptyRequest, opts ...grpc.CallOption) (*SerialReply, error) {
	out := new(SerialReply)
	err := c.cc.Invoke(ctx, "/serial.Serial/GetSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialClient) SetSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*SerialReply, error) {
	out := new(SerialReply)
	err := c.cc.Invoke(ctx, "/serial.Serial/SetSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerialServer is the server API for Serial service.
// All implementations should embed UnimplementedSerialServer
// for forward compatibility
type SerialServer interface {
	GetSerial(context.Context, *SerialEmptyRequest) (*SerialReply, error)
	// Update config
	SetSerial(context.Context, *SerialRequest) (*SerialReply, error)
}

// UnimplementedSerialServer should be embedded to have forward compatible implementations.
type UnimplementedSerialServer struct {
}

func (UnimplementedSerialServer) GetSerial(context.Context, *SerialEmptyRequest) (*SerialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerial not implemented")
}
func (UnimplementedSerialServer) SetSerial(context.Context, *SerialRequest) (*SerialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSerial not implemented")
}

// UnsafeSerialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerialServer will
// result in compilation errors.
type UnsafeSerialServer interface {
	mustEmbedUnimplementedSerialServer()
}

func RegisterSerialServer(s grpc.ServiceRegistrar, srv SerialServer) {
	s.RegisterService(&Serial_ServiceDesc, srv)
}

func _Serial_GetSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).GetSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial.Serial/GetSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).GetSerial(ctx, req.(*SerialEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serial_SetSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServer).SetSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial.Serial/SetSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServer).SetSerial(ctx, req.(*SerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Serial_ServiceDesc is the grpc.ServiceDesc for Serial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serial.Serial",
	HandlerType: (*SerialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSerial",
			Handler:    _Serial_GetSerial_Handler,
		},
		{
			MethodName: "SetSerial",
			Handler:    _Serial_SetSerial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serial.proto",
}
